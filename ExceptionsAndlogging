import java.time.LocalDate;

public class Test
{

    public static void main(String[] args)
    {
        StudentList studentList = new StudentList();
        try
        {
            studentList.addStudent(new Student("", "Barbulescu", "F",
                    LocalDate.of(1_914, 5, 30), 1));
            studentList.addStudent(new Student("Adolf", "Barbulescu", "F",
                    LocalDate.of(1_941, 5, 30), 2));
            studentList.addStudent(new Student("Rudolf", "Barbulescu", "F",
                    LocalDate.of(1_989, 5, 30), 3));
            studentList.addStudent(new Student("Apfel", "Barbulescu", "M",
                    LocalDate.of(1_991, 5, 30), 4));
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }

        studentList.showStudents();
        studentList.deleteStudent(1);
        studentList.showStudents();
    }
}



import java.time.LocalDate;

public class Student
{
    private String _firstName;
    private String _lastName;
    private String _gender;
    private LocalDate _birthDate;
    private int _id;

    public String getFirstName()
    {
        return _firstName;
    }

    public void setFirstName(String firstName)
    {
        if (firstName.isEmpty()) {
            throw new IllegalArgumentException("Numele nu trebuie sa aibe campuri goale");
        }

        this._firstName = firstName;
    }

    public String getLastName()
    {
        return _lastName;
    }

    public void setLastName(String lastName)
    {
        if (lastName.isEmpty()) {
            throw new IllegalArgumentException("Numele nu trebuie sa aibe campuri goale");
        }

        this._lastName = lastName;
    }

    public String getGender()
    {
        return _gender;
    }

    public void setGender(String gender)
    {
        if (!this._gender.equalsIgnoreCase("F") &&
                !this._gender.equalsIgnoreCase("M")) {
            throw new IllegalArgumentException("Esti Femeie sau Barbat? Alege!");
        }

        this._gender = gender;
    }

    public LocalDate getBirthDate()
    {
        return _birthDate;
    }

    public void setBirthDate(LocalDate birthDate)
    {
        this._birthDate = birthDate;
    }

    public int getId()
    {
        return _id;
    }

    public void setId(int id)
    {
        this._id = id;
    }


    public Student(String firstName, String lastName, String gender, LocalDate birthDate,int id)
    {
        this.setId(id);
        this.setFirstName(firstName);
        this.setLastName(lastName);
        this.setGender(gender);
        this.setBirthDate(birthDate);
    }

    public int returnAge(){
        return LocalDate.now().getYear()-this.getBirthDate().getYear();
    }


public String toString() {
            return "ID : " + this.getId() + " | "+
                    "Student{"+
                    "First Name : " + this.getFirstName() + " | " +
                    "Last Name : " + this.getLastName() + " | " +
                    "Gender : " + this.getGender() + " | " +
                    "Birth Date : " + this.getBirthDate() + " | " +
                    "}";
}
}



import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

public class StudentList {
    private List<Student> students = new ArrayList<>();

    public void addStudent(Student studentAdaugat) throws Exception {
        if (studentAdaugat == null)
            throw new Exception("Obiectul adaugat nu exista!");

        if (studentAdaugat.getBirthDate().getYear() < 1900 || studentAdaugat.getBirthDate().getYear() > LocalDate.now().getYear() - 18) {
            throw new IllegalArgumentException("Anul trebuie sa fie intre 1900 si " + (LocalDate.now().getYear() - 18));
        }

        students.add(studentAdaugat);

    }

    public void deleteStudent(int id)
    {
        int index = 0;
        for (Student student : students) {
            if (student.getId() == id) {
                students.remove(index);
                break;
            }
            index++;
        }
    }

    public void showStudents()
    {
        for (Student student : students)
            System.out.println(student);

    }
}
